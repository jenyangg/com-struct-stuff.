module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
.clk(clk) {
  // The reset conditioner is used to synchronize the reset signal to the FPGA
  // clock. This ensures the entire FPGA comes out of reset at the same time.
  reset_conditioner reset_cond;
    fsm state = {DEFAULT, GO,SURVIVED};
    edge_detector edge_detector (#RISE(1), #FALL(0));
 
  .rst(rst) {
      }
}
 
    multi_seven_seg seg(.rst(rst),.clk(clk));
    multi_dec_ctr dec_ctr(.rst(rst),.clk(clk));
    counter ctr (#SIZE(1), #DIV(24),.rst(rst),.clk(clk));
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off    
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    edge_detector.in = 0;
    dec_ctr.inc = 0;

    seg.values[0] = 0;
    seg.values[1] = 0;
    seg.values[2] = 0;
    seg.values[3] = 0;
 
    io_seg = ~0; // connect segments to the driver
    io_sel = ~0; // connect digit select to the driver    
    
    case(state.q){
    
      state.DEFAULT:
      if (io_button[0]){  
        state.d = state.GO;}
        
    
      state.GO:
      led = 8hff;
      edge_detector.in = ctr.value;
      dec_ctr.inc = edge_detector.out;
      seg.values = dec_ctr.digits;  
 
      io_seg = ~seg.seg; // connect segments to the driver
      io_sel = ~seg.sel; // connect digit select to the driver
        
      if (dec_ctr.digits[0] == 4h00 && dec_ctr.digits[1] == 4h00 && dec_ctr.digits[2] == 4h00 && dec_ctr.digits[3] == 4h00 ){
        state.d = state.SURVIVED;
          }
        
      state.SURVIVED:
      led = 8h00;
        }
    }
  }